@startuml

rectangle "GameLogic" as gamelogic {
    note as gamelogicnote
      |= Responsibilities |= Collaborators |
      | knows which players play | Board |
      | print welcome message | List<Rule> |
      | Print instructions to player | List<WinCondition> |
      | decide which player should move (attention, double Jump rule) | BoardPrinter |
      | check win conditions ||
      | print win message ||
      | check that input move has correct format ||
      | check if move is valid ||
      | get move from player ||
      | print error message ||
    endnote
}

rectangle "Board" as board {
    note as boardnote
      |= Responsibilities |= Collaborators |
      | create init state ||
      | move piece ||
      | decide if piece was captured and maybe remove piece ||
      | Decide if transform to King ||
    endnote
}

rectangle "List<WinCondition>" as winconditions {
    note as WinCondition
      | One subclass of WinCondition for every win condition ||
      |= Responsibilities |= Collaborators |
      | decide if condition was met | Board |
    endnote
}

rectangle "BoardPrinter" as boardprinter {
    note as BoardPrinter
      |= BoardPrinter |= |
      |= Responsibilities |= Collaborators |
      | print board | Board |
    endnote
}

rectangle Move as move {
  note as Move
    |= Move |= |
    |= Responsibilities |= Collaborators |
    | hold move parameters (From field A to field B) ||
  endnote
}

rectangle "List<Rule>" as rules {
  note as Rule
    | One subclass of Rule for every rule ||
    |= Responsibilities |= Collaborators |
    | Is there a piece of the correct player ||
    | Target field is empty ||
    | If jump move: is a opponent piece between ||
    | If not jump move: is no jump move possible ||
    | If king: can move diagonally in all directions ||
  endnote
}

gamelogic --> board
gamelogic --> rules
gamelogic --> winconditions
gamelogic --> boardprinter

winconditions --> board

boardprinter --> board

rules --> move
rules --> board

@enduml
